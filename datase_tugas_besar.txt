CREATE DATABASE smart_canteen;
-- ===========================================================================

CREATE TABLE user (
  user_id INT AUTO_INCREMENT PRIMARY KEY,
  
  -- Login credentials
  username VARCHAR(50) UNIQUE,
  email VARCHAR(100) NOT NULL UNIQUE,
  password_hash TEXT NOT NULL,
  
  -- Personal information
  full_name VARCHAR(100) NOT NULL,
  phone_number VARCHAR(20),
  role ENUM('student', 'guest') NOT NULL,
  
  -- Residence status for student
  is_dorm_resident BOOLEAN DEFAULT FALSE,
  dorm_room VARCHAR(50),
  
  -- Account status and wallet
  verified BOOLEAN DEFAULT FALSE,
  wallet_balance DECIMAL(12,2) DEFAULT 0.00 CHECK (wallet_balance <= 2000000),
  reward_point INT DEFAULT 0
);

-- ===========================================================================
CREATE TABLE merchant (
  merchant_id INT AUTO_INCREMENT PRIMARY KEY,
  
  -- Personal info and login credentials
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL UNIQUE,
  password_hash TEXT NOT NULL,
  phone_number VARCHAR(20),
  
  -- Business info
  store_name VARCHAR(100) NOT NULL,
  pickup_location TEXT,
  
  -- Rating info
  rating_avg DECIMAL(3,2) DEFAULT 0.00,
  rating_count INT DEFAULT 0
);

-- ===========================================================================
CREATE TABLE product (
  product_id INT AUTO_INCREMENT PRIMARY KEY,
  
  -- Relationship
  merchant_id INT NOT NULL,
  FOREIGN KEY (merchant_id) REFERENCES merchant(merchant_id),
  
  -- Product details
  name VARCHAR(100) NOT NULL,
  price DECIMAL(12,2) NOT NULL,
  stock INT DEFAULT 0,
  last_stock_update datetime,
  preparation_time_minutes INT,
  
  -- Special product info
  is_special BOOLEAN DEFAULT FALSE,
  special_available_date DATE
);

-- ===========================================================================
CREATE TABLE customer_order (
  order_id INT AUTO_INCREMENT PRIMARY KEY,
  
  -- Relationship
  user_id INT,
  FOREIGN KEY (user_id) REFERENCES user(user_id),
  
  -- Order time and price
  order_datetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  required_datetime TIMESTAMP NOT NULL,
  estimated_duration_minutes INT, -- after the order accepted
  total_price DECIMAL(12,2) NOT NULL,
  
  -- Delivery details
  is_delivery BOOLEAN DEFAULT FALSE,
  delivery_location VARCHAR(100),
  
  -- Status
  order_status ENUM('pending', 'preparing', 'ready', 'completed', 'cancelled') DEFAULT 'pending',
  payment_status ENUM('pending', 'paid') DEFAULT 'pending'
);

-- ===========================================================================
CREATE TABLE order_detail (
  order_detail_id INT AUTO_INCREMENT PRIMARY KEY,
  
  -- Relationships
  order_id INT NOT NULL,
  product_id INT NOT NULL,
  FOREIGN KEY (order_id) REFERENCES customer_order(order_id),
  FOREIGN KEY (product_id) REFERENCES product(product_id),
  
  -- Purchase info
  unit_price DECIMAL(12,2) NOT NULL,
  quantity INT NOT NULL DEFAULT 1
);

-- ===========================================================================
CREATE TABLE payment (
  payment_id INT AUTO_INCREMENT PRIMARY KEY,
  
  -- Relationship
  order_id INT NOT NULL,
  FOREIGN KEY (order_id) REFERENCES customer_order(order_id),
  
  -- Payment method
  method ENUM('wallet', 'ewallet', 'mixed', 'debit') NOT NULL,
  
  -- eWallet
  ewallet_type ENUM('OVO', 'GoPay', 'Dana', 'ShopeePay'),
  ewallet_amount DECIMAL(12,2) DEFAULT 0.00,
  
  -- Wallet and debit
  wallet_amount DECIMAL(12,2) DEFAULT 0.00,
  debit_amount DECIMAL(12,2) DEFAULT 0.00
);

-- ===========================================================================
CREATE TABLE rating (
  rating_id INT AUTO_INCREMENT PRIMARY KEY,
  
  -- Relationships
  user_id INT NOT NULL,
  merchant_id INT NOT NULL,
  order_id INT NOT NULL,
  FOREIGN KEY (user_id) REFERENCES user(user_id),
  FOREIGN KEY (merchant_id) REFERENCES merchant(merchant_id),
  FOREIGN KEY (order_id) REFERENCES customer_order(order_id),
  
  -- Rating content
  rating_value INT NOT NULL CHECK (rating_value BETWEEN 1 AND 5),
  review_text TEXT,
  
  -- Creation time
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===========================================================================
CREATE TABLE voucher (
  voucher_id INT AUTO_INCREMENT PRIMARY KEY,
  
  -- Voucher code and value
  code VARCHAR(50) UNIQUE NOT NULL,
  value DECIMAL(12,2) NOT NULL,
  min_transaction DECIMAL(12,2),
  
  -- Valid period
  start_date DATE,
  end_date DATE,
  
  -- Issuer
  merchant_id INT,
  FOREIGN KEY (merchant_id) REFERENCES merchant(merchant_id),
  
  -- Redemption
  max_redemption INT NOT NULL,
  current_redemption INT DEFAULT 0
);

-- ===========================================================================
CREATE TABLE promo (
  promo_id INT AUTO_INCREMENT PRIMARY KEY,
  
  -- Promo details
  name VARCHAR(100) NOT NULL,
  type ENUM('volume', 'time') NOT NULL,
  
  -- Relationship
  merchant_id INT,
  FOREIGN KEY (merchant_id) REFERENCES merchant(merchant_id),
  
  -- Time-based promo
  start_time TIMESTAMP,
  end_time TIMESTAMP,
  
  -- Volume-based promo
  volume_limit INT,
  used_count INT DEFAULT 0
);

